/*
** Default LDF for C, C++ and assembly applications targeting ADSP-BF533.
**
** File revision : $Revision: 1.39 $
**
** There are a number of configuration macros that may be specified as a
** result of use of certain compiler switches or by linker flags directly.
** The options are:
**
** __WORKAROUNDS_ENABLED
**   Defined by compiler to direct LDF to link with libraries that have
**   been built with hardware errata workarounds enabled.
** NO_INSTRUCTION_CACHE
**   Allows use of L1 Instruction SRAM/Cache space, in SRAM mode.
** USE_DATA_A_CACHE, USE_DATA_B_CACHE, USE_CACHE
**   Avoids use of regions of L1 which will be configured for cache use.
**   Use implies the presence SDRAM (external) memory.
** USE_SDRAM
**   Makes SDRAM available as standard program and data memory.
** USE_SCRATCHPAD_STACK
**   Use scratchpad for system stack. Note only 4k memory.
** USE_SCRATCHPAD_HEAP
**   Use scratchpad for dynamic heap allocation. Note only 4k memory.
** USE_SDRAM_STACK
**   Use SDRAM for system stack rather than L1 default. Should allow for
**   much larger stack but likely to have a significant performance impact.
** USE_SDRAM_HEAP
**   Use SDRAM for dynamic heap allocation rather than L1 default. Should
**   result in a much larger heap being available but can have a significant
**   performance impact.
** USER_CRT
**   Specifies a custom or generated CRT startup object to use.
** USER_CPLBTAB
**   Specifies a custom or generated CPLB configuration
**   definition.
** USE_FILEIO
**   Normally defined and causes linking of I/O support libraries.
** _ADI_FX_LIBIO
**   Defined by the compiler when switch -fixed-point-io is used to direct the
**   use of libio with support for fixed-point conversion specifiers.
** _DINKUM_IO
**   Defined by the compiler when switch -full-io is used to direct the
**   use of the slower but more conformant Dinkum libc I/O support instead
**   of libio.
** __NO_STD_LIB
**   Defined by the compiler when switch -no-std-lib is used and causes
**   the LDF to avoid using the standard CrossCore Embedded Studio library
**   search path.
** __MEMINIT__
**   Macro defined by the linker when -meminit is used to enable run
**   initialization.
** NON_VOL_INSTR_INIT_MEM
**   Can be defined to the name of a non-volatile memory section to be
**   used to map instruction used for meminit runtime initialization.
**   Defaults to "MEM_L1_CODE".
** NON_VOL_DATA_INIT_MEM
**   Can be defined to the name of a non-volatile memory section to be
**   used to map data used for meminit runtime initialization.
**   Defaults to "MEM_L1_DATA_A".
** _PGO_HW
**   Macro defined by the compiler when PGO is targeted at hardware
**   (-pguide -prof-hw). It ensures that we link with the file I/O enabled
**   runtime support library and creates a definition holding the executable
**   name.
** _HEAP_DEBUG
**   Macro defined when heap debugging is enabled, causes libheapdbg to be
**   linked in, providing debug versions of the heap functions to be used.
** USE_EXE_NAME
**   Macro defined when we want to plant the name of the executable into a
**   C character array in data memory.
** _ADI_FULLCPPLIB
**   Use the Full C++ Standard Library (default is Abridged).
** START_SYM
**   Specifies a custom start symbol to use. Defaults to "start".
** START_ADDR
**   Specifies a custom start address to use. Defaults to L1 SRAM.
** STACK_SIZE, HEAP_SIZE, STACKHEAP_SIZE
**   When all three of these macros are defined they configure the minimum
**   sizes for the system heap and stack.
*/

ARCHITECTURE(ADSP-BF533)

/*
** define macros used to check cache configuration
*/
#if ((   defined(USE_SDRAM) \
      || defined(USE_SDRAM_HEAP) \
      || defined(USE_SDRAM_STACK)) \
     && !defined(USE_CACHE) \
     && !defined(USE_DATA_A_CACHE) \
     && !defined(USE_DATA_B_CACHE) \
     && !defined(NO_INSTRUCTION_CACHE))
  #define USE_INSTRUCTION_CACHE
  #define USE_CACHE
#endif

#if defined(USE_INSTRUCTION_CACHE) || \
    defined(USE_DATA_A_CACHE) || defined(USE_DATA_B_CACHE)
  #define USE_CACHE_PARTS 1
#else
  #define USE_CACHE_PARTS 0
#endif
#define INSTR_CACHE \
    ( defined(USE_CACHE) && \
     ( ( defined(USE_INSTRUCTION_CACHE) || !USE_CACHE_PARTS ) ) )
#define DATAA_CACHE \
    ( defined(USE_CACHE) && \
     ( ( defined(USE_DATA_A_CACHE) || defined(USE_DATA_B_CACHE) || \
         !USE_CACHE_PARTS ) ) )
#define DATAB_CACHE \
    ( defined(USE_CACHE) && \
     ( ( defined(USE_DATA_B_CACHE) || !USE_CACHE_PARTS ) ) )

#if defined(_HEAP_DEBUG) || defined(_PGO_HW) || defined(_INSTRUMENTED_PROFILING)
  #if !defined(USE_EXE_NAME)
    #define USE_EXE_NAME 1
  #endif
#endif

/*
** define various macros used to reduce complexity of LDF
*/
#define _Cat2(_a,_b) _a##_b
#define _Cat(_a,_b) _Cat2(_a,_b)

#if defined(_ADI_THREADS)
  #define _MT mt
#else
  #define _MT
#endif

#if defined(__ADI_LIBEH__)
  #define _MTX _Cat(_MT, x)
#else
  #define _MTX _MT
#endif

/*
** Macros for selecting the required runtime libraries variants
** for C++ exception handling and multithreading support
*/
#define RT_LIB_NAME_MT(n) _Cat(lib##n, _Cat(_MT, .dlb))
#define RT_LIB_NAME_EH_MT(n) _Cat(lib##n, _Cat(_MTX, .dlb))

/*
** macros for deciding whether to place stack or heap into L1,
** checking that only a single placement is defined for both the stack
** and heap, raising an error if multiple macros are found.
*/
#if defined(USE_L1DATA_STACK)
  #if defined(USE_SCRATCHPAD_STACK)
    #error stack mapped to both L1DATA and Scratchpad.
  #endif
  #if defined(USE_SDRAM_STACK)
    #error stack mapped to both L1DATA and SDRAM.
  #endif
#else
  #if defined(USE_SCRATCHPAD_STACK) && defined(USE_SDRAM_STACK)
    #error stack mapped to both Scratchpad and SDRAM.
  #endif
  #define USE_L1DATA_STACK \
    !defined(USE_SCRATCHPAD_STACK) && !defined(USE_SDRAM_STACK)
#endif

#if defined(USE_L1DATA_HEAP)
  #if defined(USE_SCRATCHPAD_HEAP)
    #error heap mapped to both L1DATA and Scratchpad.
  #endif
  #if defined(USE_SDRAM_HEAP)
    #error heap mapped to both L1DATA and SDRAM.
  #endif
#else
  #if defined(USE_SCRATCHPAD_HEAP) && defined(USE_SDRAM_HEAP)
    #error heap mapped to both Scratchpad and SDRAM.
  #endif
  #define USE_L1DATA_HEAP \
    !defined(USE_SCRATCHPAD_HEAP) && !defined(USE_SDRAM_HEAP)
#endif

/*
** Minimum sizes of the stack and heap allocated. To override the
** default size it is necessary to define all three macros.
*/
#if !defined(STACK_SIZE) || !defined(HEAP_SIZE) || !defined(STACKHEAP_SIZE)
  #define STACK_SIZE 8K
  #define HEAP_SIZE 7K
  #define STACKHEAP_SIZE 15K /* STACK_SIZE + HEAP_SIZE */
#endif

/*
** decide if to include mappings to SDRAM or not
*/
#if !defined(USE_SDRAM) && \
    ( defined(USE_CACHE) || defined(USE_SDRAM_STACK) || \
      defined(USE_SDRAM_HEAP) )
  #define USE_SDRAM
#endif

/*
** default to USE_FILEIO support
*/
#if !defined(USE_FILEIO)
  #define USE_FILEIO 1
#endif

/*
** determine which CRT to use
*/
#if defined(USER_CRT)
  #define CRT USER_CRT
#else
  #if USE_FILEIO
    #if defined(__cplusplus)
      #define CRT crtsfc532.doj
    #else
      #define CRT crtsf532.doj
    #endif
  #else
    #if defined(__cplusplus)
      #define CRT crtsc532.doj
    #else
      #define CRT crts532.doj
    #endif
  #endif
#endif

/*
** Determine which start label to use and its location.
*/
#if !defined(START_SYM)
  #define START_SYM start
#endif

#if !defined(START_ADDR)
  #define START_ADDR 0xFFA00000
#endif

/*
** define linked objects list
*/
$OBJECTS =
   CRT,                        /* C startup object                 */
   $COMMAND_LINE_OBJECTS ,     /* defined by linker                */
#if defined(USER_CPLBTAB)
   USER_CPLBTAB ,              /* custom cplb configuration        */
#else
   cplbtab533.doj,             /* default cplb configuration       */
#endif
   crtn532.doj                 /* CRT end object                   */
;

/*
** define linked library list
*/
$LIBRARIES =
   libcc.dlb,                  /* Compiler support routines        */
   RT_LIB_NAME_MT(small),      /* Supervisor mode support routines */
#if defined(_HEAP_DEBUG)
   RT_LIB_NAME_EH_MT(heapdbg), /* Heap debugging library           */
#endif
#if defined(_DINKUM_IO)
   RT_LIB_NAME_MT(c),          /* ANSI C (and IO) run-time library */
   RT_LIB_NAME_MT(io),         /* Fast IO and host IO support      */
#else
 #if defined(_ADI_FX_LIBIO)
   RT_LIB_NAME_MT(iofx),       /* Fast IO and host IO with         */
                               /* fixed-point support              */
 #else
   RT_LIB_NAME_MT(io),         /* Fast IO and host IO support      */
 #endif
   RT_LIB_NAME_MT(c),          /* ANSI C (and IO) run-time library */
#endif
#if USE_FILEIO || defined(_INSTRUMENTED_PROFILING) || defined(_PGO_HW) || defined(_HEAP_DEBUG)
   RT_LIB_NAME_MT(rt_fileio),  /* Run-time Support with File IO    */
#else
   RT_LIB_NAME_MT(rt),         /* Run-time Support without File IO */
#endif
   RT_LIB_NAME_MT(event),      /* Interrupt handler support        */
#if defined(_ADI_FULLCPPLIB)
   RT_LIB_NAME_MT(cppfull),    /* ANSI C++ run-time library        */
#else
   RT_LIB_NAME_EH_MT(cpp),     /* ANSI C++ run-time library        */
#endif
   libdsp.dlb,                 /* DSP run-time library             */
   libetsi.dlb,                /* ETSI run-time support library    */
   libssl.dlb,                 /* System Services library          */
   libdrv.dlb,                 /* Drivers library                  */
#if !defined(_ADI_THREADS)
   libosal_noos.dlb,           /* OSAL No-OS Library               */
#endif
   RT_LIB_NAME_MT(profile),    /* Profile support routines         */
   libdyn.dlb                  /* DLM support                      */
;

/*
** List of all objects and libraries.
*/
$OBJS_LIBS = $OBJECTS, $LIBRARIES;

#if defined(USE_SDRAM)
/*
** List of objects and libraries which prefer internal memory as
** specified by prefersMem attribute.
*/
$OBJS_LIBS_INTERNAL = $OBJS_LIBS{prefersMem("internal")};

/*
** List of objects and libraries which don't have a preference for
** external memory as would be specified by prefersMem attribute.
*/
$OBJS_LIBS_NOT_EXTERNAL = $OBJS_LIBS{!prefersMem("external")};
#endif // defined(USE_SDRAM)

/*
** ADSP-BF533 Memory Map.
**
** 0xFFE00000 - 0xFFFFFFFF  Core MMR registers (2MB)
** 0xFFC00000 - 0xFFDFFFFF  System MMR registers (2MB)
** 0xFFB01000 - 0xFFBFFFFF  Reserved
** 0xFFB00000 - 0xFFB00FFF  Scratch SRAM (4K)
** 0xFFA14000 - 0xFFAFFFFF  Reserved
** 0xFFA10000 - 0xFFA13FFF  Code SRAM / cache (16K)
** 0xFFA00000 - 0xFFA0FFFF  Code SRAM (64K)
** 0xFF908000 - 0xFF9FFFFF  Reserved
** 0xFF904000 - 0xFF907FFF  Data Bank B SRAM / cache (16K)
** 0xFF900000 - 0xFF903FFF  Data Bank B SRAM (16K)
** 0xFF808000 - 0xFF8FFFFF  Reserved
** 0xFF804000 - 0xFF807FFF  Data Bank A SRAM / cache (16K)
** 0xFF800000 - 0xFF803FFF  Data Bank A SRAM (16K)
** 0xEF000000 - 0xFF7FFFFF  Reserved
** 0x20400000 - 0xEEFFFFFF  Reserved
** 0x20300000 - 0x203FFFFF  ASYNC MEMORY BANK 3 (1MB)
** 0x20200000 - 0x202FFFFF  ASYNC MEMORY BANK 2 (1MB)
** 0x20100000 - 0x201FFFFF  ASYNC MEMORY BANK 1 (1MB)
** 0x20000000 - 0x200FFFFF  ASYNC MEMORY BANK 0 (1MB)
** 0x00000000 - 0x04000000  EZ-Kit SDRAM MEMORY (32MB/64MB)
** 0x00000000 - 0x07FFFFFF  SDRAM MEMORY (16MB - 128MB)
**
** Notes:
** 0xFF807FEF-0xFF807FFF Required by boot-loader.
*/

MEMORY {
  MEM_L1_SCRATCH       { START(0xFFB00000) END(0xFFB00FFF) TYPE(RAM) WIDTH(8) }
  MEM_L1_CODE_CACHE    { START(0xFFA10000) END(0xFFA13FFF) TYPE(RAM) WIDTH(8) }
  MEM_L1_CODE          { START(0xFFA00000) END(0xFFA0FFFF) TYPE(RAM) WIDTH(8) }

#if DATAB_CACHE /* { */
  MEM_L1_DATA_B_CACHE  { START(0xFF904000) END(0xFF907FFF) TYPE(RAM) WIDTH(8) }
  MEM_L1_DATA_B        { START(0xFF900000) END(0xFF903FFF) TYPE(RAM) WIDTH(8) }
#else
  MEM_L1_DATA_B        { START(0xFF900000) END(0xFF907FFF) TYPE(RAM) WIDTH(8) }
#endif /* DATAB_CACHE } */

#if DATAA_CACHE
  MEM_L1_DATA_A_CACHE  { START(0xFF804000) END(0xFF807FFF) TYPE(RAM) WIDTH(8) }
  MEM_L1_DATA_A        { START(0xFF800000) END(0xFF803FFF) TYPE(RAM) WIDTH(8) }
#else
  MEM_L1_DATA_A        { START(0xFF800000) END(0xFF807FFF) TYPE(RAM) WIDTH(8) }
#endif

  // The flash memory connected to the ADSP-BF533 EZ-KIT is implemented
  // with two dual-bank flash memory devices. These devices include
  // primary and secondary flash memory as well as internal SRAM and
  // registers. Primary flash memory totals 2 Mbytes mapped into two
  // separate asynchronous memory banks, 1 Mbyte each. Secondary flash
  // memory, along with SRAM and registers, occupies the third bank of
  // asynchronous memory space.

  MEM_ASYNC0           { START(0x20000000) END(0x200FFFFF) TYPE(ROM) WIDTH(8) }
  MEM_ASYNC1           { START(0x20100000) END(0x201FFFFF) TYPE(ROM) WIDTH(8) }
  MEM_ASYNC2           { START(0x20200000) END(0x202FFFFF) TYPE(ROM) WIDTH(8) }
  //MEM_ASYNC3         { START(0x20300000) END(0x203FFFFF) TYPE(RAM) WIDTH(8) }

  // The ADSP-BF533 EZ-KIT (revision >= 1.7) is supplied with 64 MB
  // (32 M x 16 bit) SDRAM.
  //
  // This LDF partitions the available SDRAM into 4 16MB banks which makes
  // the best use of the EBIU and minimizes memory stall cycles.

  MEM_SDRAM0_BANK0     { START(0x00000004) END(0x00FFFFFF) TYPE(RAM) WIDTH(8) }
  MEM_SDRAM0_BANK1     { START(0x01000000) END(0x01FFFFFF) TYPE(RAM) WIDTH(8) }
  MEM_SDRAM0_BANK2     { START(0x02000000) END(0x02FFFFFF) TYPE(RAM) WIDTH(8) }
  MEM_SDRAM0_BANK3     { START(0x03000000) END(0x03FFFFFF) TYPE(RAM) WIDTH(8) }

} // MEMORY

PROCESSOR p0 {
  OUTPUT( $COMMAND_LINE_OUTPUT_FILE )

  // Resolve the CRT start symbol to the reset address.
  RESOLVE(START_SYM, START_ADDR)

  KEEP(START_SYM, _main)

  SECTIONS {

#if defined(__WORKAROUND_AVOID_LDF_BLOCK_BOUNDARIES) /* { */
    /* Workaround for hardware errata 05-00-0189 and 05-00-0310 -
    ** "Speculative (and fetches made at boundary of reserved memory
    ** space) for instruction or data fetches may cause false
    ** protection exceptions" and "False hardware errors caused by
    ** fetches at the boundary of reserved memory ".
    **
    ** Done by avoiding use of 76 bytes from at the end of blocks
    ** that are adjacent to reserved memory. Workaround is enabled
    ** for appropriate silicon revisions (-si-revision switch).
    */
    RESERVE(___wab0=MEMORY_END(MEM_L1_SCRATCH) - 75, ___l0=76)
  #if !INSTR_CACHE
    RESERVE(___wab1=MEMORY_END(MEM_L1_CODE_CACHE) - 75, ___l1=76)
  #else
    RESERVE(___wab2=MEMORY_END(MEM_L1_CODE)  - 75, ___l2=76)
  #endif
    RESERVE(___wab3=MEMORY_END(MEM_L1_DATA_B) - 75, ___l3=76)
    RESERVE(___wab4=MEMORY_END(MEM_L1_DATA_A) - 75, ___l4=76)
    RESERVE(___wab5=MEMORY_END(MEM_ASYNC2) - 75, ___l5=76) /* Ez-Kit FLASH */
  #if defined(USE_CACHE) || defined(USE_SDRAM)
    RESERVE(___wab6=MEMORY_END(MEM_SDRAM0_BANK3) - 75,___l6=76)
  #endif
#endif /*} __WORKAROUND_AVOID_LDF_BLOCK_BOUNDARIES */

/*
** Include avoidance of boot-loader used bytes. The workaround for errata
** 05-00-0189 may have achieved this already.
*/
#if !defined(__WORKAROUND_AVOID_LDF_BLOCK_BOUNDARIES)
    RESERVE(___bldr1=0xFF807FEF,___bldr1l=17)
#endif

#if defined(__MEMINIT__)
    // When using meminit support, the boot stream and code and
    // data needed in order for initialization of RAM at runtime
    // is normally placed in non volatile memory, e.g. FLASH.
    // By default we place it into RAM though, this being more
    // suitable for initial development and testing. You can
    // define macros NON_VOL_INSTR_INIT_MEM and
    // NON_VOL_DATA_INIT_MEM to change the destinations, for
    // example to define them to use MEM_ASYNC0.
    #if !defined(NON_VOL_INSTR_INIT_MEM)
      #if defined(USE_SDRAM)
        #define NON_VOL_INSTR_INIT_MEM MEM_SDRAM0_BANK3
      #else
        #define NON_VOL_INSTR_INIT_MEM MEM_L1_CODE
      #endif
    #endif

    #if !defined(NON_VOL_DATA_INIT_MEM)
      #if defined(USE_SDRAM)
        #define NON_VOL_DATA_INIT_MEM MEM_SDRAM0_BANK2
      #else
        #define NON_VOL_DATA_INIT_MEM MEM_L1_DATA_A
      #endif
    #endif

    // The initialization code and data are identified using
    // the file attribute requiredForROMBoot.
    $OBJS_LIBS_ROM_BOOT = $OBJS_LIBS{requiredForROMBoot};

    // Put code sections that contain breakpoints into
    // the load initialized memory as breakpoints are not
    // handled correctly when they are in runtime
    // initialized memory (ref. TAR-47733). This requires
    // that NON_VOL_INSTR_INIT_MEM is RAM though.
    $OBJS_LIBS_WITH_BREAKPOINTS =
      $OBJS_LIBS { FuncName("_main") ||
                   FuncName("___lib_prog_term") ||
                   FuncName("__primIO") ||
                   FuncName("__ov_start") ||
                   FuncName("__ov_end") ||
                   FuncName("__dbg_assert") ||
                   FuncName("__stack_overflowed") ||
                   FuncName("__fatal_error") ||
                   FuncName("__fatal_exception") };

    // The syntax below performs a memory reserve for space
    // used to locate the boot stream.
    .meminit { ALIGN(4) } > NON_VOL_DATA_INIT_MEM

    // Inputs for the initialization code.
    non_vol_mem_init_code {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS_ROM_BOOT(program cplb_code noncache_code)
                      $OBJS_LIBS_WITH_BREAKPOINTS(program) )
    } > NON_VOL_INSTR_INIT_MEM

    // Inputs for the initialization data.
    non_vol_mem_init_data {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS_ROM_BOOT(constdata)
                      $OBJS_LIBS(bsz_init) )
    } > NON_VOL_DATA_INIT_MEM

    // All subsequent RAM outputs should now be runtime initialized
    // where appropriate. This is done using a macro defined below.
    // NO_INIT sections are exempt. Sections for zero initialized
    // data are always ZERO_INIT qualified whether meminit is used
    // or not.
    #define DEF_SECTION_QUAL RUNTIME_INIT

#else

    #define DEF_SECTION_QUAL // None, rely on load-time initialization.

#endif // defined(__MEMINIT__)

    //
    // Input sections to L1 scratchpad memory. You can't DMA to
    // scratch memory so it's not really useful for initialized data
    // (which is generally initialized using DMA). Therefore we
    // only use scratch memory for NO_INIT inputs and optionally for
    // stack and/or heap.
    //
    L1_scratchpad NO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(L1_scratchpad) )
      #define ADI_MODULES_INPUT_SECTIONS_SCRATCHPAD
      #include "modules_blackfin.ldf"
      #undef ADI_MODULES_INPUT_SECTIONS_SCRATCHPAD
    } > MEM_L1_SCRATCH

#if defined(USE_SCRATCHPAD_STACK) || defined(USE_SCRATCHPAD_HEAP)
    stack_and_heap_scratchpad NO_INIT {
      INPUT_SECTION_ALIGN(4)
      RESERVE(stack_and_heap_in_scratchpad, stack_and_heap_in_scratchpad_length, 0, 4)
#if defined(USE_SCRATCHPAD_STACK) && defined(USE_SCRATCHPAD_HEAP)
      ldf_stack_space = stack_and_heap_in_scratchpad;
      ldf_stack_end = (ldf_stack_space + ((stack_and_heap_in_scratchpad_length * STACK_SIZE) / STACKHEAP_SIZE) - 4 ) & 0xfffffffc;
      ldf_heap_space = ldf_stack_end + 4;
      ldf_heap_end = ldf_stack_space + stack_and_heap_in_scratchpad_length;
      ldf_heap_length = ldf_heap_end - ldf_heap_space;
#elif defined(USE_SCRATCHPAD_STACK)
      ldf_stack_space = stack_and_heap_in_scratchpad;
      ldf_stack_end = ldf_stack_space + stack_and_heap_in_scratchpad_length;
#elif defined(USE_SCRATCHPAD_HEAP)
      ldf_heap_space = stack_and_heap_in_scratchpad;
      ldf_heap_end = ldf_heap_space + stack_and_heap_in_scratchpad_length;
      ldf_heap_length = ldf_heap_end - ldf_heap_space;
#endif
    } > MEM_L1_SCRATCH
#endif

    //
    // Input sections to the L1 instruction memory.
    //
#if INSTR_CACHE

    L1_code_cache NO_INIT {
      ___l1_code_cache = 1;
    } >MEM_L1_CODE_CACHE

#else

    L1_code_cache DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
      ___l1_code_cache = 0;
      INPUT_SECTIONS( $OBJS_LIBS(L1_code cplb_code cplb) )
#if defined(USE_SDRAM)
      INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(program) )
      INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(program) )
#endif
      INPUT_SECTIONS( $OBJS_LIBS(program) )
      #define ADI_MODULES_INPUT_SECTIONS_L1_INSTR
      #include "modules_blackfin.ldf"
      #undef ADI_MODULES_INPUT_SECTIONS_L1_INSTR
    } >MEM_L1_CODE_CACHE

#endif

    L1_code DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(L1_code cplb_code cplb noncache_code) )
#if defined(USE_SDRAM)
      INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(program) )
      INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(program) )
#endif
      INPUT_SECTIONS( $OBJS_LIBS(program) )
      #define ADI_MODULES_INPUT_SECTIONS_L1_INSTR
      #include "modules_blackfin.ldf"
      #undef ADI_MODULES_INPUT_SECTIONS_L1_INSTR
    } >MEM_L1_CODE

    //
    // Input sections to the L1 data B memory.
    //
#if DATAB_CACHE

    // When Data B caching is enabled the top 16k is reserved.
    L1_data_b_cache NO_INIT {
      ___l1_data_cache_b = 1;
    } >MEM_L1_DATA_B_CACHE

#endif // DATAB_CACHE

    // If USE_SDRAM is defined we need to try and use internal memory
    // for the highest priority data first. When not defined all data is mapped
    // to internal memory so there is no prioritization.

    // Input data that only gets mapped to internal memory.

    // First map lists for C++ support that must be mapped contiguously
    // and are only mapped to Bank B when using internal memory.
    // These are put into SDRAM if possible as C++ exceptions handling
    // isn't usually performance critical.
#if !defined(USE_SDRAM) && (defined(__cplusplus) || defined(USER_CRT))
    L1_data_b_prio0_tables DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
      FORCE_CONTIGUITY
      INPUT_SECTIONS( $OBJS_LIBS(ctor) )   // global C++ constructors list
      INPUT_SECTIONS( $OBJS_LIBS(ctorl) )  // NULL terminator for ctor
      INPUT_SECTIONS( $OBJS_LIBS(.gdt) )   // C++ exceptions data
      INPUT_SECTIONS( $OBJS_LIBS(.gdtl) )  // NULL terminator for .gdt
    } >MEM_L1_DATA_B
#endif

    // Next input data that only gets mapped to internal memory.
    L1_data_b_prio0 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
#if !DATAB_CACHE
      ___l1_data_cache_b = 0;
#endif
#if !defined(USE_SDRAM)
  #if defined(USE_EXE_NAME)
      EXECUTABLE_NAME(__executable_name)
  #endif
#endif // defined(USE_SDRAM)
      INPUT_SECTIONS( $OBJS_LIBS(L1_data_b L1_data cplb_data) )
    } >MEM_L1_DATA_B

    // Next input sections that have initialization qualifiers and are only
    // mapped to internal memory.
    L1_data_b_bsz_prio0 ZERO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(L1_bsz_b L1_bsz) )
    } >MEM_L1_DATA_B

    L1_data_b_no_init_prio0 NO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(L1_noinit_data_b L1_noinit_data) )
    } >MEM_L1_DATA_B

#if defined(USE_SDRAM)
    // Next input sections that contain data for objects that should
    // preferably end up in internal memory.
    L1_data_b_prio1 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
#if defined(__cplusplus) || defined(USER_CRT)
      INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(data1 voldata vtbl constdata) )
#else
      INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(data1 voldata constdata) )
#endif
    } >MEM_L1_DATA_B

    L1_data_b_bsz_prio1 ZERO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(bsz) )
    } >MEM_L1_DATA_B

    L1_data_b_no_init_prio1 NO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(noinit_data) )
    } >MEM_L1_DATA_B

    // Next input sections that contain data for objects that we don't
    // preferably want to end up in external memory.
    L1_data_b_prio2 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
#if defined(__cplusplus) || defined(USER_CRT)
      INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(data1 voldata vtbl constdata) )
#else
      INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(data1 voldata constdata) )
#endif
    } >MEM_L1_DATA_B

    L1_data_b_bsz_prio2 ZERO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(bsz) )
    } >MEM_L1_DATA_B

    L1_data_b_no_init_prio2 NO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(noinit_data) )
    } >MEM_L1_DATA_B
#endif

    // Next use any unused memory for any remaining unmapped inputs.
    L1_data_b_prio3 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
#if defined(__cplusplus) || defined(USER_CRT)
      INPUT_SECTIONS( $OBJS_LIBS(data1 voldata vtbl constdata .edt .cht .rtti) )
#else
      INPUT_SECTIONS( $OBJS_LIBS(data1 voldata constdata) )
#endif
      #define ADI_MODULES_INPUT_SECTIONS_L1_DATAB
      #include "modules_blackfin.ldf"
      #undef ADI_MODULES_INPUT_SECTIONS_L1_DATAB
    } >MEM_L1_DATA_B

    L1_data_b_bsz_prio3 ZERO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(bsz) )
    } >MEM_L1_DATA_B

    L1_data_b_no_init_prio3 NO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(noinit_data) )
    } >MEM_L1_DATA_B

    //
    // Input sections to the L1 data A memory.
    // Also reserves memory for the default stack and heap.
    //
#if DATAA_CACHE

    // When Data A caching is enabled the top 16k is reserved.
    L1_data_a_cache NO_INIT {
      ___l1_data_cache_a = 1;
    } >MEM_L1_DATA_A_CACHE

#endif // DATAA_CACHE

    // If USE_SDRAM is defined we need to try and use internal memory
    // for the highest priority data first. When not defined all data is mapped
    // to internal memory so there is no prioritization.

    // First input data that only gets mapped to internal memory.
    // Also reserve the minimum amount of memory required for the heap and
    // stack if they are in L1.
    L1_data_a_prio0 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
#if !DATAA_CACHE
      ___l1_data_cache_a = 0;
#endif
#if USE_L1DATA_STACK && USE_L1DATA_HEAP
      RESERVE(stack_and_heap_in_L1_data_a, stack_and_heap_in_L1_data_a_length = STACKHEAP_SIZE, 4)
#elif USE_L1DATA_HEAP
      RESERVE(stack_and_heap_in_L1_data_a, stack_and_heap_in_L1_data_a_length = HEAP_SIZE, 4)
#elif USE_L1DATA_STACK
      RESERVE(stack_and_heap_in_L1_data_a, stack_and_heap_in_L1_data_a_length = STACK_SIZE, 4)
#endif
      INPUT_SECTIONS( $OBJS_LIBS(L1_data_a L1_data cplb_data) )
    } >MEM_L1_DATA_A

    // Next input sections that have initialization qualifiers and are only
    // mapped to internal memory.
    L1_data_a_bsz_prio0 ZERO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(L1_bsz_a L1_bsz) )
    } >MEM_L1_DATA_A

    L1_data_a_no_init_prio0 NO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(L1_noinit_data_a L1_noinit_data) )
    } >MEM_L1_DATA_A

#if defined(USE_SDRAM)
    // Next input sections that contain data for objects that should
    // preferably end up in internal memory.
    L1_data_a_bsz_prio1 ZERO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(bsz) )
    } >MEM_L1_DATA_A

    L1_data_a_no_init_prio1 NO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(noinit_data) )
    } >MEM_L1_DATA_A

    L1_data_a_prio1 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
#if defined(__cplusplus) || defined(USER_CRT)
      INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(data1 voldata vtbl constdata) )
#else
      INPUT_SECTIONS( $OBJS_LIBS_INTERNAL(data1 voldata constdata) )
#endif
    } >MEM_L1_DATA_A

    // Next input sections that contain data for objects that we don't
    // preferably want to end up in external memory.
    L1_data_a_bsz_prio2 ZERO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(bsz) )
    } >MEM_L1_DATA_A

    L1_data_a_no_init_prio2 NO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(noinit_data) )
    } >MEM_L1_DATA_A

    L1_data_a_prio2 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
#if defined(__cplusplus) || defined(USER_CRT)
      INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(data1 voldata vtbl constdata) )
#else
      INPUT_SECTIONS( $OBJS_LIBS_NOT_EXTERNAL(data1 voldata constdata) )
#endif
    } >MEM_L1_DATA_A
#endif

    // Next use any unused memory for any remaining unmapped inputs.
    L1_data_a_prio3 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
#if defined(__cplusplus) || defined(USER_CRT)
      INPUT_SECTIONS( $OBJS_LIBS(data1 voldata vtbl constdata .edt .cht .rtti) )
#else
      INPUT_SECTIONS( $OBJS_LIBS(data1 voldata constdata) )
#endif
      #define ADI_MODULES_INPUT_SECTIONS_L1_DATAA
      #include "modules_blackfin.ldf"
      #undef ADI_MODULES_INPUT_SECTIONS_L1_DATAA
    } >MEM_L1_DATA_A

    L1_data_a_bsz_prio3 ZERO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(bsz) )
    } >MEM_L1_DATA_A

    L1_data_a_no_init_prio3 NO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(noinit_data) )
    } >MEM_L1_DATA_A

    // Expand the reserved stack and heap memory to claim any unused memory
    // and define the symbols used to setup the stack by the runtime startup.
#if USE_L1DATA_STACK || USE_L1DATA_HEAP
    stack_and_heap_L1_data_a NO_INIT {
      INPUT_SECTION_ALIGN(4)
#if !(defined(__MEMINIT__) && !defined(USE_SDRAM))
      RESERVE_EXPAND(stack_and_heap_in_L1_data_a, stack_and_heap_in_L1_data_a_length, 0, 4)
#endif
#if USE_L1DATA_STACK && USE_L1DATA_HEAP
      ldf_stack_space = stack_and_heap_in_L1_data_a;
      ldf_stack_end = (ldf_stack_space + ((stack_and_heap_in_L1_data_a_length * STACK_SIZE) / STACKHEAP_SIZE) - 4 ) & 0xfffffffc;
      ldf_heap_space = ldf_stack_end + 4;
      ldf_heap_end = ldf_stack_space + stack_and_heap_in_L1_data_a_length;
      ldf_heap_length = ldf_heap_end - ldf_heap_space;
#elif USE_L1DATA_STACK
      ldf_stack_space = stack_and_heap_in_L1_data_a;
      ldf_stack_end = ldf_stack_space + stack_and_heap_in_L1_data_a_length;
#elif USE_L1DATA_HEAP
      ldf_heap_space = stack_and_heap_in_L1_data_a;
      ldf_heap_end = ldf_heap_space + stack_and_heap_in_L1_data_a_length;
      ldf_heap_length = ldf_heap_end - ldf_heap_space;
#endif
    } >MEM_L1_DATA_A
#endif

#if defined(USE_SDRAM)

#if (defined(USE_SDRAM_STACK) || defined(USE_SDRAM_HEAP)) && \
    (!DATAA_CACHE && !DATAB_CACHE)
  #warning Putting the stack or default heap into external sdram without data cache enabled can have a serious performance impact.
#endif

    // If stack or heap are to be mapped to SDRAM, place them in bank 0.
    // Otherwise we put code in bank 0.
#if defined(USE_SDRAM_STACK) || defined(USE_SDRAM_HEAP)
    sdram0_bank0 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(sdram0_bank0) )
#if defined(USE_SDRAM_STACK) && defined(USE_SDRAM_HEAP)
      RESERVE(stack_and_heap_in_sdram, stack_and_heap_in_sdram_length = STACKHEAP_SIZE, 4)
#elif defined(USE_SDRAM_STACK)
      RESERVE(stack_and_heap_in_sdram, stack_and_heap_in_sdram_length = STACK_SIZE, 4)
#elif defined(USE_SDRAM_HEAP)
      RESERVE(stack_and_heap_in_sdram, stack_and_heap_in_sdram_length = HEAP_SIZE, 4)
#endif
    } >MEM_SDRAM0_BANK0

    sdram_bank0_stack_heap NO_INIT {
      INPUT_SECTION_ALIGN(4)
      RESERVE_EXPAND(stack_and_heap_in_sdram, stack_and_heap_in_sdram_length, 0, 4)
#if defined(USE_SDRAM_STACK) && defined(USE_SDRAM_HEAP)
      ldf_stack_space = stack_and_heap_in_sdram;
      ldf_stack_end = (ldf_stack_space + ((stack_and_heap_in_sdram_length * STACK_SIZE) / STACKHEAP_SIZE) - 4 ) & 0xfffffffc;
      ldf_heap_space = ldf_stack_end + 4;
      ldf_heap_end = ldf_stack_space + stack_and_heap_in_sdram_length;
      ldf_heap_length = ldf_heap_end - ldf_heap_space;
#elif defined(USE_SDRAM_STACK)
      ldf_stack_space = stack_and_heap_in_sdram;
      ldf_stack_end = ldf_stack_space + stack_and_heap_in_sdram_length;
#elif defined(USE_SDRAM_HEAP)
      ldf_heap_space = stack_and_heap_in_sdram;
      ldf_heap_end = ldf_heap_space + stack_and_heap_in_sdram_length;
      ldf_heap_length = ldf_heap_end - ldf_heap_space;
#endif
    } >MEM_SDRAM0_BANK0

#else

    sdram0_bank0 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(sdram0_bank0 sdram0 noncache_code program) )
      #define ADI_MODULES_INPUT_SECTIONS_SDRAMB0
      #include "modules_blackfin.ldf"
      #undef ADI_MODULES_INPUT_SECTIONS_SDRAMB0
    } >MEM_SDRAM0_BANK0

#endif

    // Put data into banks 1 and 2.
#if defined(__cplusplus) || defined(USER_CRT)
    sdram0_bank1_tables DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
      FORCE_CONTIGUITY
      INPUT_SECTIONS( $OBJS_LIBS(ctor) )   // global C++ constructors list
      INPUT_SECTIONS( $OBJS_LIBS(ctorl) )  // NULL terminator for ctor
      INPUT_SECTIONS( $OBJS_LIBS(.gdt) )   // C++ exceptions data
      INPUT_SECTIONS( $OBJS_LIBS(.gdtl) )  // NULL terminator for .gdt
    } >MEM_SDRAM0_BANK1
#endif

    sdram0_bank1 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
#if defined(USE_EXE_NAME)
      EXECUTABLE_NAME(__executable_name)
#endif
#if defined(__cplusplus) || defined(USER_CRT)
      INPUT_SECTIONS( $OBJS_LIBS(sdram0_bank1 sdram0_data data1 voldata
                                 constdata vtbl .edt .cht .rtti sdram0) )
#else
      INPUT_SECTIONS( $OBJS_LIBS(sdram0_bank1 sdram0_data data1 voldata
                                 constdata sdram0) )
#endif
      #define ADI_MODULES_INPUT_SECTIONS_SDRAMB1
      #include "modules_blackfin.ldf"
      #undef ADI_MODULES_INPUT_SECTIONS_SDRAMB1
    } >MEM_SDRAM0_BANK1

    sdram0_bank1_bsz ZERO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(sdram_bsz bsz) )
    } >MEM_SDRAM0_BANK1

    sdram0_bank1_no_init NO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(sdram_noinit_data noinit_data) )
    } >MEM_SDRAM0_BANK1

    sdram0_bank2 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
#if defined(__cplusplus) || defined(USER_CRT)
      INPUT_SECTIONS( $OBJS_LIBS(sdram0_bank2 sdram0_data data1 voldata
                                 constdata vtbl .edt .cht .rtti sdram0) )
#else
      INPUT_SECTIONS( $OBJS_LIBS(sdram0_bank2 sdram0_data data1 voldata
                                 constdata sdram0) )
#endif
      #define ADI_MODULES_INPUT_SECTIONS_SDRAMB2
      #include "modules_blackfin.ldf"
      #undef ADI_MODULES_INPUT_SECTIONS_SDRAMB2
    } >MEM_SDRAM0_BANK2

    sdram0_bank2_bsz ZERO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(sdram_bsz bsz) )
    } >MEM_SDRAM0_BANK2

    sdram0_bank2_no_init NO_INIT {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(sdram_noinit_data noinit_data) )
    } >MEM_SDRAM0_BANK2

    // Put instruction code sections into bank 3.
    sdram0_bank3 DEF_SECTION_QUAL {
      INPUT_SECTION_ALIGN(4)
      INPUT_SECTIONS( $OBJS_LIBS(sdram0_bank3 noncache_code program sdram0) )
      #define ADI_MODULES_INPUT_SECTIONS_SDRAMB3
      #include "modules_blackfin.ldf"
      #undef ADI_MODULES_INPUT_SECTIONS_SDRAMB3
   } >MEM_SDRAM0_BANK3

#endif // USE_SDRAM

  } // SECTIONS

} // PROCESSOR p0
