<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="org.eclipse.cdt.core.cxxSource.contenttype_context" deleted="false" description="Default uTTCOS_main with example template" enabled="true" name="Default uTTCOS_main with example template">// This is an example TT_COS main( ) function with example Threads.&#13;
// Use this as a template for your own TT_COS main( ) for the various Tasks&#13;
&#13;
#warning "${date} Remember to add uTTCOS library and include paths to your other lab code"&#13;
&#13;
#include &lt;uTTCOS2013/uTTCOS.h&gt;&#13;
	&#13;
#define EXECUTE_EVERY_SECOND 		uTTCOS_GetTickFrequency( )&#13;
&#13;
#include &lt;stdio.h&gt;&#13;
&#13;
volatile int whichProgram = 0;&#13;
&#13;
void Thread_SayHiOccasionally(void) {&#13;
	static int counter = 0;&#13;
	counter = (counter + 1) &amp; 0xF;&#13;
&#13;
	int value = counter + uTTCOS_ReadLED( ) &amp; 0xF ;&#13;
	if (whichProgram == 1)&#13;
		uTTCOS_WriteLED(value);&#13;
	 else&#13;
		uTTCOS_WriteLED(counter);&#13;
&#13;
	printf("Hi Occasionally  %d   %d\n", counter, value);&#13;
}&#13;
&#13;
void Thread_SayHiOccasionally__withParameters(int pArg__fI) {&#13;
	static int counter = 0;&#13;
	counter = (counter + 1) &amp; 0xF;&#13;
	&#13;
	int value = counter + uTTCOS_ReadLED( ) &amp; 0xF ;&#13;
	if (whichProgram == 1)&#13;
		uTTCOS_WriteLED(value);&#13;
	 else&#13;
		uTTCOS_WriteLED(counter);&#13;
		&#13;
	for (int count = 0; count &lt; pArg__fI; count++) {&#13;
		printf("Thread_SayHiOccasionally__withParameters -- note interaction   %d   %d  ", counter, value);&#13;
	}&#13;
	printf("\n");&#13;
}&#13;
&#13;
void Thread_SayGreeting(void) {&#13;
	printf("Greetings from uTTCOS2013\n");&#13;
}&#13;
&#13;
#include &lt;stdio.h&gt;&#13;
&#13;
void main(void) {&#13;
	int maxNumberThreads = 10;   // Make at least 5 larger than the tasks you plan to add&#13;
&#13;
	uTTCOS_Init( );	&#13;
	uTTCOS_InitLED( );			// Initialize the LEDs using the standard uTTCOS drivers&#13;
	uTTCOS_WriteLED(0);			// Clear LEDs to 0&#13;
	&#13;
	uTTCOS_InitSwitches( );		// Initialize the SWITCHES using the standard uTTCOS drivers&#13;
&#13;
// Set which program thread to follow based on switch settings&#13;
	whichProgram = uTTCOS_ReadSwitches( );&#13;
	printf("%d\n", whichProgram);&#13;
	&#13;
	whichProgram = uTTCOS_ReadSwitches( );&#13;
	printf("%d\n", whichProgram);&#13;
	&#13;
	&#13;
	whichProgram = uTTCOS_ReadSwitches( );&#13;
	printf("%d\n", whichProgram);&#13;
&#13;
&#13;
    uTTCOS_AddPreEmptiveThread(uTTCOS_AudioTalkThrough,  NO_DELAY, EVERY_TICK);&#13;
		&#13;
	uTTCOS_AddThread(Thread_SayGreeting, NO_DELAY, RUN_ONCE);&#13;
	uTTCOS_AddThread(Thread_SayHiOccasionally, NO_DELAY, EXECUTE_EVERY_SECOND);&#13;
	uTTCOS_AddThread__fI(Thread_SayHiOccasionally__withParameters, 2, NO_DELAY, 3 * EXECUTE_EVERY_SECOND);&#13;
	uTTCOS_AddThread__fI(Thread_SayHiOccasionally__withParameters, 3, NO_DELAY, 4 * EXECUTE_EVERY_SECOND);&#13;
&#13;
	uTTCOS_Start_Scheduler(maxNumberThreads);&#13;
				// Execution time of TT_COS_Dispatch( ) and TT_COS_Update( ) improved by specifiying maxNumberTasks&#13;
	&#13;
	while (1) {	&#13;
&#13;
		// Wait, in low power mode, for an interrupt&#13;
		// The interrupt service routine calls TTCOS_Update( )&#13;
		uTTCOS_GoToSleep( );&#13;
&#13;
		// Run all the threads in the system according&#13;
		// to whether their delays have expired&#13;
		uTTCOS_DispatchThreads( );&#13;
	}&#13;
	&#13;
}&#13;
</template><template autoinsert="false" context="org.eclipse.cdt.core.cxxSource.contenttype_context" deleted="false" description="Default uTTCOS main( ) template" enabled="true" name="Default uTTCOS main( ) template">// This is an example TT_COS main( ) function&#13;
// Use this as a template for your own TT_COS main( ) for the various Tasks&#13;
&#13;
#warning "${date} Remember to add uTTCOS library and include paths to your other lab code"&#13;
&#13;
#include &lt;uTTCOS2013/uTTCOS.h&gt;&#13;
	&#13;
#define EXECUTE_EVERY_SECOND 		uTTCOS_GetTickFrequency( )&#13;
&#13;
#include &lt;stdio.h&gt;&#13;
&#13;
#include &lt;stdio.h&gt;&#13;
&#13;
void main(void) {&#13;
	int maxNumberThreads = 10;   // Make at least 5 larger than the tasks you plan to add&#13;
&#13;
	uTTCOS_Init( );	&#13;
	&#13;
	// Add your initialization code here&#13;
&#13;
	// Add one pre-emptibve thread&#13;
    // uTTCOS_AddPreEmptiveThread(uTTCOS_AudioTalkThrough,  NO_DELAY, EVERY_TICK);&#13;
		&#13;
	// Add your non-pre-emptive threads&#13;
&#13;
&#13;
	uTTCOS_Start_Scheduler(maxNumberThreads);&#13;
				// Execution time of TT_COS_Dispatch( ) and TT_COS_Update( ) improved by specifiying maxNumberTasks&#13;
	&#13;
	while (1) {	&#13;
&#13;
		// Wait, in low power mode, for an interrupt&#13;
		// The interrupt service routine calls TTCOS_Update( )&#13;
		uTTCOS_GoToSleep( );&#13;
&#13;
		// Run all the threads in the system according&#13;
		// to whether their delays have expired&#13;
		uTTCOS_DispatchThreads( );&#13;
	}&#13;
	&#13;
}&#13;
</template></templates>